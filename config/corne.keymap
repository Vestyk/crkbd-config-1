/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/led/led.h>

&spi1 {
	compatible = "nordic,nrf-spim";
	/* Cannot be used together with i2c0. */
	status = "okay";
	mosi-pin = <6>;
	// Unused pins, needed for SPI definition, but not used by the ws2812 driver itself.
	sck-pin = <5>;
	miso-pin = <7>;

	led_strip: ws2812@0 {
		compatible = "worldsemi,ws2812-spi";
		label = "SK6812mini";

		/* SPI */
		reg = <0>; /* ignored, but necessary for SPI bindings */
		spi-max-frequency = <4000000>;

		/* WS2812 */
		chain-length = <27>; /* There are per-key RGB, but enable all */
		spi-one-frame = <0x70>;
		spi-zero-frame = <0x40>;

		color-mapping = <LED_COLOR_ID_GREEN LED_COLOR_ID_RED LED_COLOR_ID_BLUE>;
	};
};

/ {
	chosen {
		zmk,underglow = &led_strip;
	};
};

&mmv {    
        time-to-max-speed-ms = <300>;
        acceleration-exponent=<1>;
};
&mwh {    
        time-to-max-speed-ms = <2000>;
        acceleration-exponent=<0>;
};
&mt {
        flavor = "tap-preferred";
        tapping-term-ms = <250>; 
};
&lt {
        flavor = "tap-preferred";
        tapping-term-ms = <250>; 
};

/ {
        keymap {
                compatible = "zmk,keymap";
                // layer 0
                default_layer {	
// -----------------------------------------------------------------------------------------
// |USBBT|  '  |  ,  |  .  |  P  |  Y  |   |  F  |  G   |  C  |  R  |  L  |  /  |
// | LED+|  A  |  O  |  E  |  U  |  I  |   |  D  |  H   |  T  |  N  |  S  |  -  |
// |  `  |  ;  |  Q  |  J  |  K  |  X  |   |  B  |  M   |  W  |  V  |  Z  |EXPWR|
//                   | DEL | SPC | TAB |   | RET | BKSP | ESC |
                        bindings = <
   &out OUT_TOG    &kp SQT     &kp COMMA   &mt LG(LA(LCTRL)) PERIOD &mt LG(LA(LC(LSHFT))) P  &kp Y      &kp F     &mt LG(LA(LC(LSHFT))) G &mt LG(LA(LCTRL)) C &kp R      &kp L          &none
   &rgb_ug RGB_EFF &mt LGUI A  &mt LALT O  &mt LCTRL E              &mt LSHFT U              &kp I      &kp D     &mt RSHFT H             &mt RCTRL T         &mt LALT N &mt RGUI S     &none
   &none           &kp SEMI    &kp Q       &kp J                    &kp K                    &kp X      &kp B     &kp M                   &kp W               &kp V      &kp Z          &ext_power EP_TOG
                                           &lt 1 DEL                &lt 4 SPACE              &lt 6 TAB  &lt 5 RET &lt 3 BSPC              &lt 1 ESC
                        >;
                };

                // layer 1
                num_layer {
// -----------------------------------------------------------------------------------------
// | RESET|  1  |   2  |   3  |   4  |   5  |   |   6  |   7  |   8  |   9  |  0   |      |
// | BOOTL|  /  |   *  |   -  |   +  |   .  |   |   =  |   ,  |   $  |   Â£  |  %   |      |
// | BTCLR| BT0 |  BT1 |  BT2 |  F11 |  F12 |   |      | PREV | VOL- | VOL+ | NEXT |      |
//                     |  DEL |  SPC |  TAB |   | RET  | BKSP | ESC  |
                        bindings = <
   &reset      &kp N1        &kp N2       &mt LG(LA(LCTRL)) N3 &mt LG(LA(LC(LSHFT))) N4 &kp N5      &kp N6  &mt LG(LA(LC(LSHFT))) N7 &mt LG(LA(LCTRL)) N8 &kp N9       &kp N0       &none
   &bootloader &mt LGUI F1   &mt LALT F2  &mt LCTRL F3         &mt LSHFT F4             &kp F5      &kp F6  &mt RSHFT F7             &mt RCTRL F8         &mt LALT F9  &mt RGUI F10 &none
   &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1 &bt BT_SEL 2         &kp F11                  &kp F12     &none   &kp C_PREV               &kp C_VOL_DN         &kp C_VOL_UP &kp C_NEXT   &none
                                          &trans               &trans                   &trans      &trans  &trans                   &trans
                        >;
                };

                // layer 2
                sym_layer {
// -----------------------------------------------------------------------------------------
// |      |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |      |
// |      |  \  |  <  |  [  |  {  |  (  |   |  )  |  }  |  ]  |  >  |  /  |      |
// |      |  `  |  ~  |  "  |  =  |  ?  |   |  _  |  *  |  +  |  -  | "|" |      |
//                    |     |     |     |   |     |     |     |
// FIXME: update mappings here
                        bindings = <
   &none  &kp LA(N3)  &kp N7  &kp N8       &kp N9 &kp LBKT         &none  &kp LG(LA(LC(LSHFT))) &kp LG(LA(LCTRL)) &none    &none    &none
   &none  &kp E       &kp N4  &kp N5       &kp N6 &kp LS(N8)       &none  &kp RSHFT             &kp RCTRL         &kp LALT &kp RGUI &none
   &none  &kp DOLLAR  &kp N1  &kp N2       &kp N3 &kp SQT          &none  &none                 &none             &none    &none    &none
                              &kp RBKT     &kp N0 &kp LS(RBKT)     &none  &none                 &none
                        >;
                };

                // layer 4
                nav_layer {
// -----------------------------------------------------------------------------------------
// |      |     |     |     |     |     |   | REDO| PST | CPY | CUT | UNDO|      |
// |      | GUI | ALT | CTRL| SHFT|     |   |     | LFT | DWN | UP  |RIGHT|      |
// |      |     |     |     |     |     |   |     | HOME| PGDN| PGUP| END |      |
//                    |     |     |     |   | RET | BKSP| ESC |
                        bindings = <
   &none  &none     &none     &kp LG(LA(LCTRL)) &kp LG(LA(LC(LSHFT))) &none    &kp C_AC_REDO  &kp C_AC_PASTE  &kp C_AC_COPY  &kp C_AC_CUT  &kp C_AC_UNDO  &none
   &none  &kp LGUI  &kp LALT  &kp LCTRL         &kp LSHFT             &none    &none          &kp LEFT        &kp DOWN       &kp UP        &kp RIGHT      &none
   &none  &none     &none     &none             &none                 &none    &none          &kp HOME        &kp PG_DN      &kp PG_UP     &kp END        &none
                              &none             &none                 &none    &kp RET        &kp BSPC        &kp ESC
                        >;
                };

                // layer 5
                sym_layer {
// When host set to qwerty
// -----------------------------------------------------------------------------------------
// |   \  |  @  |  #  |  _  |  +  |  ]  |   |      |      |     |     |     |      |
// |   {  |  `  |  %  |  (  |  )  | "|" |   |      | SHFT | CTRL| ALT | GUI |      |
// |   *  |  &  |  ^  |  -  |  =  |  ~  |   |      |      |     |     |     |      |
//                    |  !  |  [  |  $  |   |      |      |     |
// When host set to dvorak
// -----------------------------------------------------------------------------------------
// |   \  |  @  |  #  |  {  |  }  |  =  |   |      |      |     |     |     |      |
// |   ?  |  `  |  %  |  (  |  )  | "|" |   |      | SHFT | CTRL| ALT | GUI |      |
// |   *  |  &  |  ^  |  [  |  ]  |  ~  |   |      |      |     |     |     |      |
//                    |  !  |  /  |  $  |   |      |      |     |
                        bindings = <
   &kp BACKSLASH  &kp AT        &kp HASH    &kp UNDERSCORE       &kp PLUS               &kp RBKT      &none  &kp LG(LA(LC(LSHFT))) &kp LG(LA(LCTRL)) &none    &none    &none
   &kp LEFT_BRACE &kp GRAVE     &kp PERCENT &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS  &kp PIPE      &none  &kp RSHFT             &kp RCTRL         &kp LALT &kp RGUI &none
   &kp STAR       &kp AMPERSAND &kp CARET   &kp MINUS            &kp EQUAL              &kp TILDE     &none  &none                 &none             &none    &none    &none
                                            &kp EXCLAMATION      &kp LBKT               &kp DOLLAR    &none  &none                 &none
                        >;
                };

                // layer 1
                func_layer {
// -----------------------------------------------------------------------------------------
// | RESET|  1  |   2  |   3  |   4  |   5  |   |   6  |   7  |   8  |   9  |  0   |      |
// | BOOTL| F1  |  F2  |  F3  |  F4  |  F5  |   |  F6  |  F7  |  F8  |  F9  | F10  |      |
// | BTCLR| BT0 |  BT1 |  BT2 |  F11 |  F12 |   |      | PREV | VOL- | VOL+ | NEXT |      |
//                     |  DEL |  SPC |  TAB |   | RET  | BKSP | ESC  |
                        bindings = <
   &reset      &kp N1        &kp N2       &mt LG(LA(LCTRL)) N3 &mt LG(LA(LC(LSHFT))) N4 &kp N5      &kp N6  &mt LG(LA(LC(LSHFT))) N7 &mt LG(LA(LCTRL)) N8 &kp N9       &kp N0       &none
   &bootloader &mt LGUI F1   &mt LALT F2  &mt LCTRL F3         &mt LSHFT F4             &kp F5      &kp F6  &mt RSHFT F7             &mt RCTRL F8         &mt LALT F9  &mt RGUI F10 &none
   &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1 &bt BT_SEL 2         &kp F11                  &kp F12     &none   &kp C_PREV               &kp C_VOL_DN         &kp C_VOL_UP &kp C_NEXT   &none
                                          &trans               &trans                   &trans      &trans  &trans                   &trans
                        >;
                };

                // layer 6
                mouse_layer {
// -----------------------------------------------------------------------------------------
// | LOCK |     |     |     |     |     |   | F20 | F21 | F22 | F23 | F24 |      |
// |      | GUI | ALT | CTRL| SHFT|     |   |     | MLFT| MDWN| MUP | MRHT|      |
// |      |     |     |     |     |     |   |     | SLFT| SDWN| SUP | SRHT|      |
//                    |     |     |     |   | LCLK| MCLK| RCLK|

                        bindings = <
   &to 7  &none     &none     &kp LG(LA(LCTRL)) &kp LG(LA(LC(LSHFT))) &none     &kp F20    &kp F21              &kp F22               &kp F23               &kp F24               &none
   &none  &kp LGUI  &kp LALT  &kp LCTRL         &kp LSHFT             &none     &none      &mmv MOVE_HOR(-2500) &mmv MOVE_VERT(2500)  &mmv MOVE_VERT(-2500) &mmv MOVE_HOR(2500)   &none
   &none  &none     &none     &none             &none                 &none     &none      &mwh SCROLL_HOR(15)  &mwh SCROLL_VERT(15)  &mwh SCROLL_VERT(-15) &mwh SCROLL_HOR(-15)  &none
                              &none             &none                 &none     &mkp LCLK  &mkp MCLK            &mkp RCLK
                        >;
                };

                // layer 7
                lock_layer {
// -----------------------------------------------------------------------------------------

                        bindings = <
   &none  &none     &none     &none     &none     &none     &none  &none     &none     &none     &none     &none
   &none  &none     &none     &none     &none     &none     &none  &none     &none     &none     &none     &none
   &none  &none     &none     &none     &none     &none     &none  &none     &none     &none     &none     &none
                              &none     &none     &none     &none  &none     &none
                        >;
                };
        };
};
