/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/led/led.h>

&spi1 {
	compatible = "nordic,nrf-spim";
	/* Cannot be used together with i2c0. */
	status = "okay";
	mosi-pin = <6>;
	// Unused pins, needed for SPI definition, but not used by the ws2812 driver itself.
	sck-pin = <5>;
	miso-pin = <7>;

	led_strip: ws2812@0 {
		compatible = "worldsemi,ws2812-spi";
		label = "SK6812mini";

		/* SPI */
		reg = <0>; /* ignored, but necessary for SPI bindings */
		spi-max-frequency = <4000000>;

		/* WS2812 */
		chain-length = <27>; /* There are per-key RGB, but enable all */
		spi-one-frame = <0x70>;
		spi-zero-frame = <0x40>;

		color-mapping = <LED_COLOR_ID_GREEN LED_COLOR_ID_RED LED_COLOR_ID_BLUE>;
	};
};

/ {
	chosen {
		zmk,underglow = &led_strip;
	};
};

&mmv {    
        time-to-max-speed-ms = <500>;
        acceleration-exponent=<1>;
};
&mwh {    
        time-to-max-speed-ms = <2000>;
        acceleration-exponent=<0>;
};
&mt {
        flavor = "tap-preferred";
        tapping-term-ms = <500>; 
};
&lt {
        flavor = "tap-preferred";
        tapping-term-ms = <500>; 
};

/ {
        // macros {
        //         ZMK_MACRO(pound_sign,
        //                 wait-ms = <0>;
        //                 bindings
        //                         = <&macro_press &kp LALT>
        //                         , <&macro_tap &kp N3>
        //                         , <&macro_release &kp LALT>
        //                         ;
        //         )
        // };

        keymap {
                compatible = "zmk,keymap";
                // layer 0
                default_layer {
// -----------------------------------------------------------------------------------------
// |USBBT|  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  [  |
// | LED+|  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '  |
// |  `  |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |EXPWR|
//                   | DEL | SPC | TAB |   | RET | BKSP | ESC |
                        bindings = <
   &out OUT_TOG    &kp Q       &kp W       &kp E       &kp R       &kp Y      &kp U     &kp I       &kp O        &kp P      &kp LBKT       &kp SLASH
   &rgb_ug RGB_EFF &mt LGUI A  &mt LALT S  &mt LCTRL D &mt LSHFT F &kp G      &kp H     &mt RSHFT J &mt RCTRL K  &mt RALT L &mt RGUI SEMI  &kp SQT
   &kp GRAVE       &kp Z       &kp X       &kp C       &kp V       &kp B      &kp N     &kp M       &kp COMMA    &kp PERIOD &kp FSLH       &ext_power EP_TOG
                                           &lt 1 DEL   &lt 2 SPACE &lt 3 TAB  &lt 3 RET &lt 2 BSPC  &lt 1 ESC
                        >;
                };

                // layer 1
                func_media_layer {
// -----------------------------------------------------------------------------------------
// | RESET| BT0 |  F7 |  F8 |  F9 | F12 |   |     |      | BDN | BUP |     | RESET|
// | BOOTL| BT1 |  F4 |  F5 |  F6 | F11 |   |     | PREV | VDN | VUP | NEXT| BOOTL|
// | BTCLR| BT2 |  F1 |  F2 |  F3 | F10 |   |     | LS+  | LS- | LH+ | LH- | EXPWR|
//                    | DEL | SPC | TAB |   | STOP| PLPS | MUTE|
                        bindings = <
   &reset      &bt BT_SEL 0  &kp F7      &kp F8       &kp F9       &kp F12     &none      &none            &kp C_BRI_DN       &kp C_BRI_UP        &none           &reset
   &bootloader &bt BT_SEL 1  &mt LALT F4 &mt LCTRL F5 &mt LSHFT F6 &kp F11     &none      &mt RSHFT C_PREV &mt RCTRL C_VOL_DN &mt RALT C_VOL_UP   &mt RGUI C_NEXT &bootloader
   &bt BT_CLR  &bt BT_SEL 2  &kp F1      &kp F2       &kp F3       &kp F10     &none      &rgb_ug RGB_SAI  &rgb_ug RGB_SAD    &rgb_ug RGB_HUI     &rgb_ug RGB_HUD &ext_power EP_TOG
                                         &kp DEL      &kp SPACE    &kp TAB     &kp C_STOP &kp C_PP         &kp K_MUTE
                        >;
                };

                // layer 2
                num_nav_layer {
// -----------------------------------------------------------------------------------------
// |      |  Â£  |  7  |  8  |  9  |  /  |   | REDO| PST | CPY | CUT | UNDO|      |
// |      |  .  |  4  |  5  |  6  |  *  |   |     | LFT | DWN | UP  |RIGHT|      |
// |      |  $  |  1  |  2  |  3  |  -  |   |     | HOME| PGDN| PGUP| END |      |
//                    |  =  |  0  |  +  |   | RET | BKSP| ESC |
                        bindings = <
   &none  &kp LA(N3)       &kp N7       &kp N8       &kp N9       &kp KP_DIVIDE    &kp C_AC_REDO  &kp C_AC_PASTE  &kp C_AC_COPY  &kp C_AC_CUT  &kp C_AC_UNDO  &none
   &none  &mt LGUI KP_DOT  &mt LALT N4  &mt LCTRL N5 &mt LSHFT N6 &kp KP_MULTIPLY  &none          &kp LEFT        &kp DOWN       &kp UP        &kp RIGHT      &none
   &none  &kp DOLLAR       &kp N1       &kp N2       &kp N3       &kp KP_MINUS     &none          &kp HOME        &kp PG_DN      &kp PG_UP     &kp END        &none
                                        &kp KP_EQUAL &kp N0       &kp KP_PLUS      &kp RET        &kp BSPC        &kp ESC
                        >;
                };

                // layer 3
                sym_mouse_layer {
// -----------------------------------------------------------------------------------------
// |   \  |  @  |  #  |  {  |  }  |  =  |   |     |     |     |     |     |      |
// |   ?  |  `  |  %  |  (  |  )  | "|" |   |     | MLFT| MDWN| MUP | MRHT|      |
// |   *  |  &  |  ^  |  [  |  ]  |  ~  |   |     | SLFT| SDWN| SUP | SRHT|      |
//                    |  !  |  /  |  $  |   | LCLK| MCLK| RCLK|
                        bindings = <
   &kp BACKSLASH &kp AT        &kp HASH    &kp LEFT_BRACE       &kp RIGHT_BRACE        &kp EQUAL     &none      &none                &none                 &none                 &none                 &none
   &kp QUESTION  &kp GRAVE     &kp PERCENT &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS  &kp PIPE      &none      &mmv MOVE_HOR(-2500) &mmv MOVE_VERT(2500)  &mmv MOVE_VERT(-2500) &mmv MOVE_HOR(2500)   &none
   &kp STAR      &kp AMPERSAND &kp CARET   &kp LEFT_BRACKET     &kp RIGHT_BRACKET      &kp TILDE     &none      &mwh SCROLL_HOR(-15) &mwh SCROLL_VERT(-15) &mwh SCROLL_VERT(15)  &mwh SCROLL_HOR(15)   &none
                                           &kp EXCLAMATION      &kp SLASH              &kp DOLLAR    &mkp LCLK  &mkp MCLK            &mkp RCLK
                        >;
                };
        };
};
